{
  "description": "DataVolume is an abstraction on top of PersistentVolumeClaims to allow easy population of those PersistentVolumeClaims with relation to VirtualMachines",
  "type": "object",
  "required": [
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "cdi.kubevirt.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "DataVolume"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "DataVolumeSpec defines the DataVolume type specification",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "checkpoints": {
          "description": "Checkpoints is a list of DataVolumeCheckpoints, representing stages in a multistage import.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "DataVolumeCheckpoint defines a stage in a warm migration.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "current",
              "previous"
            ],
            "properties": {
              "current": {
                "description": "Current is the identifier of the snapshot created for this checkpoint.",
                "type": "string"
              },
              "previous": {
                "description": "Previous is the identifier of the snapshot from the previous checkpoint.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "contentType": {
          "description": "DataVolumeContentType options: \"kubevirt\", \"archive\"",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "kubevirt",
            "archive"
          ]
        },
        "finalCheckpoint": {
          "description": "FinalCheckpoint indicates whether the current DataVolumeCheckpoint is the final checkpoint.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "preallocation": {
          "description": "Preallocation controls whether storage for DataVolumes should be allocated in advance.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "priorityClassName": {
          "description": "PriorityClassName for Importer, Cloner and Uploader pod",
          "type": [
            "string",
            "null"
          ]
        },
        "pvc": {
          "description": "PVC is the PVC specification",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "accessModes": {
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiGroup": {
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "kind": {
                  "description": "Kind is the type of resource being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of resource being referenced",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "storageClassName": {
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
              "type": [
                "string",
                "null"
              ]
            },
            "volumeMode": {
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
              "type": [
                "string",
                "null"
              ]
            },
            "volumeName": {
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "source": {
          "description": "Source is the src of the data for the requested DataVolume",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "blank": {
              "description": "DataVolumeBlankImage provides the parameters to create a new raw blank image for the PVC",
              "type": [
                "object",
                "null"
              ]
            },
            "http": {
              "description": "DataVolumeSourceHTTP can be either an http or https endpoint, with an optional basic auth user name and password, and an optional configmap containing additional CAs",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "url"
              ],
              "properties": {
                "certConfigMap": {
                  "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretRef": {
                  "description": "SecretRef A Secret reference, the secret should contain accessKeyId (user name) base64 encoded, and secretKey (password) also base64 encoded",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the URL of the http(s) endpoint",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "imageio": {
              "description": "DataVolumeSourceImageIO provides the parameters to create a Data Volume from an imageio source",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "diskId",
                "url"
              ],
              "properties": {
                "certConfigMap": {
                  "description": "CertConfigMap provides a reference to the CA cert",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "diskId": {
                  "description": "DiskID provides id of a disk to be imported",
                  "type": "string"
                },
                "secretRef": {
                  "description": "SecretRef provides the secret reference needed to access the ovirt-engine",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the URL of the ovirt-engine",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "pvc": {
              "description": "DataVolumeSourcePVC provides the parameters to create a Data Volume from an existing PVC",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "description": "The name of the source PVC",
                  "type": "string"
                },
                "namespace": {
                  "description": "The namespace of the source PVC",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "registry": {
              "description": "DataVolumeSourceRegistry provides the parameters to create a Data Volume from an registry source",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "url"
              ],
              "properties": {
                "certConfigMap": {
                  "description": "CertConfigMap provides a reference to the Registry certs",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretRef": {
                  "description": "SecretRef provides the secret reference needed to access the Registry source",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the url of the Docker registry source",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "s3": {
              "description": "DataVolumeSourceS3 provides the parameters to create a Data Volume from an S3 source",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "url"
              ],
              "properties": {
                "certConfigMap": {
                  "description": "CertConfigMap is a configmap reference, containing a Certificate Authority(CA) public key, and a base64 encoded pem certificate",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretRef": {
                  "description": "SecretRef provides the secret reference needed to access the S3 source",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the url of the S3 source",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "upload": {
              "description": "DataVolumeSourceUpload provides the parameters to create a Data Volume by uploading the source",
              "type": [
                "object",
                "null"
              ]
            },
            "vddk": {
              "description": "DataVolumeSourceVDDK provides the parameters to create a Data Volume from a Vmware source",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "backingFile": {
                  "description": "BackingFile is the path to the virtual hard disk to migrate from vCenter/ESXi",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "secretRef": {
                  "description": "SecretRef provides a reference to a secret containing the username and password needed to access the vCenter or ESXi host",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "thumbprint": {
                  "description": "Thumbprint is the certificate thumbprint of the vCenter or ESXi host",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "url": {
                  "description": "URL is the URL of the vCenter or ESXi host with the VM to migrate",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "uuid": {
                  "description": "UUID is the UUID of the virtual machine that the backing file is attached to in vCenter/ESXi",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "sourceRef": {
          "description": "SourceRef is an indirect reference to the source of data for the requested DataVolume",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "kind",
            "name"
          ],
          "properties": {
            "kind": {
              "description": "The kind of the source reference, currently only \"DataSource\" is supported",
              "type": "string"
            },
            "name": {
              "description": "The name of the source reference",
              "type": "string"
            },
            "namespace": {
              "description": "The namespace of the source reference, defaults to the DataVolume namespace",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "storage": {
          "description": "Storage is the requested storage specification",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "accessModes": {
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "kind",
                "name"
              ],
              "properties": {
                "apiGroup": {
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "kind": {
                  "description": "Kind is the type of resource being referenced",
                  "type": "string"
                },
                "name": {
                  "description": "Name is the name of resource being referenced",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "matchExpressions": {
                  "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "key",
                      "operator"
                    ],
                    "properties": {
                      "key": {
                        "description": "key is the label key that the selector applies to.",
                        "type": "string"
                      },
                      "operator": {
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                        "type": "string"
                      },
                      "values": {
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "matchLabels": {
                  "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "storageClassName": {
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
              "type": [
                "string",
                "null"
              ]
            },
            "volumeMode": {
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
              "type": [
                "string",
                "null"
              ]
            },
            "volumeName": {
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "DataVolumeStatus contains the current status of the DataVolume",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "DataVolumeCondition represents the state of a data volume condition.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastHeartbeatTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "DataVolumeConditionType is the string representation of known condition types",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "phase": {
          "description": "Phase is the current phase of the data volume",
          "type": [
            "string",
            "null"
          ]
        },
        "progress": {
          "description": "DataVolumeProgress is the current progress of the DataVolume transfer operation. Value between 0 and 100 inclusive, N/A if not available",
          "type": [
            "string",
            "null"
          ]
        },
        "restartCount": {
          "description": "RestartCount is the number of times the pod populating the DataVolume has restarted",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "cdi.kubevirt.io",
      "kind": "DataVolume",
      "version": "v1beta1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}